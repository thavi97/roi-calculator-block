{"version":3,"file":"roi-calculator/view.js","mappings":";;;;AAAAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EACnDD,QAAQ,CAACE,gBAAgB,CAAC,iBAAiB,CAAC,CAACC,OAAO,CAAEC,IAAI,IAAK;IAC9D,MAAMC,MAAM,GAAGD,IAAI,CAACF,gBAAgB,CAAC,OAAO,CAAC;IAC7C,MAAMI,WAAW,GAAGF,IAAI,CAACF,gBAAgB,CAAC,aAAa,CAAC;IACxD,MAAMK,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAACM,OAAO,CAACC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC;;IAEhE;IACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;MACvB,MAAMC,MAAM,GAAG,CAAC,CAAC;;MAEjB;MACAR,MAAM,CAACF,OAAO,CAACW,KAAK,IAAI;QACvB,MAAMC,GAAG,GAAGD,KAAK,CAACJ,OAAO,CAACK,GAAG;QAC7B,IAAIC,KAAK,GAAGC,UAAU,CAACH,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC;;QAExC;QACA,IAAIF,KAAK,CAACI,IAAI,KAAK,QAAQ,IAAIJ,KAAK,CAACI,IAAI,KAAK,KAAK,EAAE;UACpDF,KAAK,GAAGC,UAAU,CAACH,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC;QACrC,CAAC,MAAM,IAAIF,KAAK,CAACI,IAAI,KAAK,MAAM,IAAIJ,KAAK,CAACI,IAAI,KAAK,OAAO,EAAE;UAC3DF,KAAK,GAAGF,KAAK,CAACE,KAAK,CAACG,IAAI,CAAC,CAAC;QAC3B;;QAEA;QACAN,MAAM,CAACE,GAAG,CAAC,GAAGC,KAAK;MACpB,CAAC,CAAC;;MAEF;MACAT,QAAQ,CAACJ,OAAO,CAACiB,KAAK,IAAI;QACzB,IAAI;UACH;UACA,MAAMC,MAAM,GAAGC,QAAQ,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACX,MAAM,CAAC,EAAE,UAAUO,KAAK,CAACK,OAAO,EAAE,CAAC,CAAC,GAAGF,MAAM,CAACV,MAAM,CAACA,MAAM,CAAC,CAAC;UACpG,MAAMa,EAAE,GAAGtB,IAAI,CAACuB,aAAa,CAAC,yBAAyBP,KAAK,CAACL,GAAG,SAAS,CAAC;;UAE1E;UACA,IAAIW,EAAE,EAAE;YACPA,EAAE,CAACE,WAAW,GAAGC,KAAK,CAACR,MAAM,CAAC,GAAG,OAAO,GAAGA,MAAM,CAACS,OAAO,CAAC,CAAC,CAAC;UAC7D;QACD,CAAC,CAAC,MAAM;UACP,MAAMJ,EAAE,GAAGtB,IAAI,CAACuB,aAAa,CAAC,yBAAyBP,KAAK,CAACL,GAAG,SAAS,CAAC;UAC1E,IAAIW,EAAE,EAAEA,EAAE,CAACE,WAAW,GAAG,OAAO;QACjC;MACD,CAAC,CAAC;IACH,CAAC;;IAED;IACAvB,MAAM,CAACF,OAAO,CAACW,KAAK,IAAIA,KAAK,CAACb,gBAAgB,CAAC,OAAO,EAAEW,SAAS,CAAC,CAAC;;IAEnE;IACAA,SAAS,CAAC,CAAC;EACZ,CAAC,CAAC;AACH,CAAC,CAAC,C","sources":["webpack://roi-calculator/./src/roi-calculator/view.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n\tdocument.querySelectorAll('.roi-calculator').forEach((calc) => {\n\t\tconst inputs = calc.querySelectorAll('input');\n\t\tconst resultElems = calc.querySelectorAll('.roi-result');\n\t\tconst formulas = JSON.parse(calc.dataset.calculations || '[]'); // Get formulas from the block\n\n\t\t// Function to perform calculation\n\t\tconst calculate = () => {\n\t\t\tconst values = {};\n\n\t\t\t// Collect all input values\n\t\t\tinputs.forEach(input => {\n\t\t\t\tconst key = input.dataset.key;\n\t\t\t\tlet value = parseFloat(input.value) || 0;\n\n\t\t\t\t// Handle different input types (e.g., number, text, etc.)\n\t\t\t\tif (input.type === 'number' || input.type === 'tel') {\n\t\t\t\t\tvalue = parseFloat(input.value) || 0;\n\t\t\t\t} else if (input.type === 'text' || input.type === 'email') {\n\t\t\t\t\tvalue = input.value.trim();\n\t\t\t\t}\n\n\t\t\t\t// Store the value by key (same as in the editor)\n\t\t\t\tvalues[key] = value;\n\t\t\t});\n\n\t\t\t// Update the result elements based on the formula for each calculated field\n\t\t\tformulas.forEach(field => {\n\t\t\t\ttry {\n\t\t\t\t\t// Evaluate the formula using the current input values\n\t\t\t\t\tconst result = Function(...Object.keys(values), `return ${field.formula}`)(...Object.values(values));\n\t\t\t\t\tconst el = calc.querySelector(`.roi-result[data-key=\"${field.key}\"] span`);\n\n\t\t\t\t\t// Update the result value or show an error\n\t\t\t\t\tif (el) {\n\t\t\t\t\t\tel.textContent = isNaN(result) ? 'Error' : result.toFixed(2);\n\t\t\t\t\t}\n\t\t\t\t} catch {\n\t\t\t\t\tconst el = calc.querySelector(`.roi-result[data-key=\"${field.key}\"] span`);\n\t\t\t\t\tif (el) el.textContent = 'Error';\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Add event listeners to input fields\n\t\tinputs.forEach(input => input.addEventListener('input', calculate));\n\n\t\t// Perform calculation once on load to set initial values\n\t\tcalculate();\n\t});\n});\n"],"names":["document","addEventListener","querySelectorAll","forEach","calc","inputs","resultElems","formulas","JSON","parse","dataset","calculations","calculate","values","input","key","value","parseFloat","type","trim","field","result","Function","Object","keys","formula","el","querySelector","textContent","isNaN","toFixed"],"sourceRoot":""}